{"version":3,"file":"static/js/504.b2ecbb90.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","components/hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif'\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{\r\n            display: 'block',\r\n            width: '250px',\r\n            height: '250px',\r\n            objectFit: 'contain',\r\n            margin: '0 auto'\r\n        }}\r\n            src={img}\r\n            alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;\r\n\r\n","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\n\nimport setContent from '../../utils/setContent'\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n        // eslint-disable-next-line\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n    \n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef, useMemo} from 'react';\nimport PropTypes from 'prop-types'\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case \"waiting\":\n            return <Spinner/>;\n        case \"loading\":\n            return newItemLoading ? <Component/> : <Spinner/>\n        case \"confirmed\":\n            return <Component/>\n        case \"error\":\n            return <ErrorMessage/>\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n\n    const [charList, setCharlist] = useState([]),\n          [newItemLoading, setNewItemLoading] = useState(false),\n          [offset, setOffset] = useState(210),\n          [charEnded, setCharEnded] = useState(false);\n    \n    const {loading, error, getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharlist(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([])\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition key={item.id} timeout={1000} classNames=\"char__item\">\n                    <li \n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === \" \" || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n                </CSSTransition>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n                \n            </ul>\n        )\n    }\n\n    const elements = useMemo( () => {\n        return setContent(process, () => renderItems(charList), newItemLoading)\n            \n    }, [process]);\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types'\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n\n    const updateChar = () => {\n        const {charId} = props;\n\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    return (\n        <div className=\"char__info\">\n        {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    \n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }                \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './CharSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n\r\n        this.setState({error: true})\r\n    }\r\n\r\n    render () {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import {useHttp} from '../components/hooks/http.hook'\r\n\r\nconst useMarvelService = () => {\r\n\tconst { request, clearError, process, setProcess } = useHttp();\r\n\r\n\tconst _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n\tconst _apiKey = \"apikey=c5d6fc8b83116d92ed468ce36bac6c62\";\r\n\tconst _baseOffset = 210;\r\n\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n\t// Вариант модификации готового метода для поиска по имени.\r\n\t// Вызывать его можно вот так: getAllCharacters(null, name)\r\n\r\n\t// const getAllCharacters = async (offset = _baseOffset, name = '') => {\r\n\t//     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\r\n\t//     return res.data.results.map(_transformCharacter);\r\n\t// }\r\n\r\n\t// Или можно создать отдельный метод для поиска по имени\r\n\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t};\r\n\r\n\tconst getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t};\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n\tconst _transformCharacter = (char) => {\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description\r\n\t\t\t\t? `${char.description.slice(0, 210)}...`\r\n\t\t\t\t: \"There is no description for this character\",\r\n\t\t\tthumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items,\r\n\t\t};\r\n\t};\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t};\r\n\t};\r\n\r\n\treturn {\r\n\t\tclearError,\r\n\t\tprocess,\r\n\t\tsetProcess,\r\n\t\tgetAllCharacters,\r\n\t\tgetCharacterByName,\r\n\t\tgetCharacter,\r\n\t\tgetAllComics,\r\n\t\tgetComic,\r\n\t\t\r\n\t};\r\n};\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState(\"waiting\");\r\n\r\n    const request = useCallback(async (url,\r\n                                       method = \"GET\",\r\n                                       body = null,\r\n                                       headers = {\r\n                                            'Content-Type': 'application/json'\r\n                                        }) => {\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n            \r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case \"waiting\":\r\n            return <Skeleton/>;\r\n        case \"loading\":\r\n            return <Spinner/>\r\n        case \"confirmed\":\r\n            return <Component data={data}/>\r\n        case \"error\":\r\n            return <ErrorMessage/>\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","data","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","_useState","useState","_useState2","_slicedToArray","char","setChar","_useMarvelService","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharlist","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","loading","error","onRequest","initial","onCharListLoaded","newCharList","ended","length","concat","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","_Fragment","charId","getCharacterByName","errorMessage","results","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","state","_createClass","value","errorInfo","console","log","this","setState","selectedChar","Helmet","content","RandomChar","CharList","CharInfo","CharSearchForm","decoration","_useHttp","request","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","_args","wrap","_context","prev","next","undefined","fetch","sent","ok","status","json","abrupt","t0","stop","_x","useHttp","_apiBase","_apiKey","res","_transformCharacter","_ref2","_callee2","_context2","_ref3","_callee3","_context3","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","slice","path","extension","urls","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","Skeleton"],"sourceRoot":""}